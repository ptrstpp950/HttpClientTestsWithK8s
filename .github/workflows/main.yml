# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  REGISTRY_NAME: httptest.azurecr.io
  REGISTRY_USERNAME: httptest
  APP_NAME: httpclienttests
  VERSION: v_${{ github.sha }}
  CLUSTER_NAME: aks-http-test
  CLUSTER_RESOURCE_GROUP: httpTest
  NAMESPACE: default

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      # Connect to Azure Container registry (ACR)
      - uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY_NAME }}
          username: ${{ env.REGISTRY_USERNAME }} 
          password: ${{ secrets.REGISTRY_PASSWORD }}

      # Container build and push to a Azure Container registry (ACR)
      - name: Docker buildx buid
        run: |
          cd HttpClientTests
          docker buildx build . -t ${{ env.REGISTRY_NAME }}/${{ env.APP_NAME }}:${{ env.VERSION }} --cache-from ${{ env.REGISTRY_NAME }}/${{ env.APP_NAME }}:cache --cache-to ${{ env.REGISTRY_NAME }}/${{ env.APP_NAME }}:cache 
          docker push ${{ env.REGISTRY_NAME }}/${{ env.APP_NAME }}:${{ env.VERSION }}

      - name: Upload deployment.template.yaml
        uses: actions/upload-artifact@v2
        with:
          name: deployment.template.yaml
          path: deploy-templates/deployment.template.yaml
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download deployment.template.yaml
        uses: actions/download-artifact@v2
        with:
          name: deployment.template.yaml
      - name: Show artifacts
        run: |
          ls -R -all
      - name: Render Deployment YAML
        uses: nowactions/envsubst@v1
        with:
          input: ./deployment.template.yaml
          output: ./deployment.yaml
        env:
          VERSION: ${{ env.VERSION }}
      - name: Show deployment file
        run: |
          cat ./deployment.yaml

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: azure/setup-kubectl@v1
        with:
          version: 'v1.18.8'

      - uses: azure/aks-set-context@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
          cluster-name: ${{ env.CLUSTER_NAME }}
          resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}

      - name: kubectl deploy
        run: |
          kubectl -n  ${{ env.NAMESPACE }} apply -f ./deployment.yaml
          kubectl -n  ${{ env.NAMESPACE }} rollout status deployment httpclienttests-disabled-deployment
          kubectl -n  ${{ env.NAMESPACE }} rollout status deployment httpclienttests-enabled-deployment
          kubectl -n  ${{ env.NAMESPACE }} rollout status deployment httpclienttests-test-deployment
          kubectl -n  ${{ env.NAMESPACE }} get po -o wide

